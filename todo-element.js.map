{"version":3,"file":"todo-element.js","sourceRoot":"","sources":["src/todo-element.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,KAAK,CAAC;AACvC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AAIhE,OAAO,YAAY,CAAC;AACpB,OAAO,aAAa,CAAC;AAKrB,IAAa,WAAW,GAAxB,MAAa,WAAY,SAAQ,UAAU;IAA3C;;QAGqC,cAAS,GAAG,IAAI,CAAC;QAExB,UAAK,GAAW;YAC1C,GAAG,EAAE;gBACH,EAAE,EAAE,GAAG;gBACP,IAAI,EAAE,KAAK;gBACX,IAAI,EAAE,YAAY;aACnB;YACD,GAAG,EAAE;gBACH,EAAE,EAAE,GAAG;gBACP,IAAI,EAAE,IAAI;gBACV,IAAI,EAAE,aAAa;aACpB;SACF,CAAA;QAKO,aAAQ,GAAG,CAAC,KAAa,EAAE,EAAE;YAEnC,MAAM,IAAI,GAAW,CAAC,IAAI,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC;YAC3C,MAAM,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;YACxC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG;gBAChB,EAAE,EAAE,GAAG;gBACP,IAAI,EAAE,KAAK;gBACX,IAAI,EAAE,KAAK;aACZ,CAAA;YAED,IAAI,CAAC,aAAa,EAAE,CAAC;QAEvB,CAAC,CAAA;QAEO,qBAAgB,GAAG,GAAG,EAAE;YAC9B,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC;QACrD,CAAC,CAAA;QAEO,kBAAa,GAAG,CAAC,EAAU,EAAQ,EAAE;YAC3C,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC;YAC3C,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC,CAAA;IAyBH,CAAC;IAvBC,MAAM;QAEJ,MAAM,KAAK,GAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAC/C,CAAC,IAAI,CAAA;8BACmB,IAAI,CAAC,aAAa;sBAC1B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;wBACb,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS;yBACtC,CAClB,CAAC,CAAA;QAEJ,OAAO,IAAI,CAAA;;;;SAIN,KAAK;;2BAEa,IAAI,CAAC,QAAQ;;yBAEf,IAAI,CAAC,gBAAgB;;;WAGnC,CAAA;IACT,CAAC;CACF,CAAA;AAhE4B;IAA1B,QAAQ,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC;8CAA0B;AAExB;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;0CAW1B;AAGwB;IAAxB,KAAK,CAAC,gBAAgB,CAAC;wDAAgD;AAnB7D,WAAW;IADvB,aAAa,CAAC,cAAc,CAAC;GACjB,WAAW,CAmEvB;SAnEY,WAAW","sourcesContent":["import { html, LitElement } from 'lit';\nimport { customElement, property, query } from 'lit/decorators';\n\nimport {TodosI} from './interface';\n\nimport './add-todo';\nimport './todo-item';\n\n\n\n@customElement('todo-element')\nexport class TodoElement extends LitElement {\n\n\n  @property({type: Boolean}) private _showDone = true;\n\n  @property({ type: Object }) todos: TodosI = {\n    '1': {\n      id: '1',\n      done: false,\n      name: 'First todo'\n    },\n    '2': {\n      id: '2',\n      done: true,\n      name: 'Second todo'\n    }\n  }\n\n  // @query('#add-todo') private _todoInput!: HTMLInputElement;\n  @query('#showCompleted') private _showCompletedInput!: HTMLInputElement;\n\n  private _addTodo = (value: string) => {\n\n    const date: string = (new Date).toString();\n    const key = (value + '_' + date).trim();\n    this.todos[key] = {\n      id: key,\n      done: false,\n      name: value\n    }\n\n    this.requestUpdate();\n\n  }\n\n  private _toggleCompleted = () => {\n    this._showDone = !this._showCompletedInput.checked;\n  }\n\n  private _changeStatus = (id: string): void => {\n    this.todos[id].done = !this.todos[id].done;\n    this.requestUpdate();\n  }\n\n  render() {\n\n    const items =  Object.keys(this.todos).map(key => \n      (html`<todo-item \n              .changeStatus=${this._changeStatus}\n              .data=${this.todos[key]}\n              .hidden=${this.todos[key].done && !this._showDone}>\n            </todo-item>`\n      ))\n\n    return html`\n    <div>\n      <h3>Todo App</h3>\n      <ul>\n       ${items}\n      </ul>\n      <add-todo .addTodo=${this._addTodo}></add-todo>\n      <div>\n        <input @change=${this._toggleCompleted} id=\"showCompleted\" type=\"checkbox\">\n        <label>Hide completed tasks</label>\n      </div>\n    </div>`\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'todo-element': TodoElement;\n  }\n}"]}